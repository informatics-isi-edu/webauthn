#!/usr/bin/python

# 
# Copyright 2012-2023 University of Southern California
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os.path
import sys
import json
import datetime

import webauthn2

def usage():
    print(
        """
usage: webauthn2-manage <cmd>...

Run this utility to perform a sub-command to manipulate 
webauthn2 service state.

  cmd: adduser <username>                (create user)
   or: deluser <username>                (remove user)

   or: passwd <username> <password>      (set user password)
   or: passwd <username> 'random'        (generate and set user password)
   or: passwd <username>                 (disable user password)

   or: addattr <attributename>           (create attribute)
   or: delattr <attributename>           (remove attribute)

   or: assign <username> <attribute>     (assign attribute to user)
   or: unassign <username> <attribute>   (unassign attribute from user)

   or: nest <child attr> <parent attr>   (make child attribute imply parent attribute)
   or: unnest <child attr> <parent attr> (make child attribute not imply parent attribute)

   or: addrobot <username> <credfile> <days> (create robot session and credential file)

The addrobot sub-command creates a fake identity, e.g.

   { 'id': 'https://host1.example.com/webauthn_robot/user1' }

if given the <username> argument 'user1' and executed on
host1.example.com. A fake session will be created or extended for this
identity with an expiration time <days> days in the future and the
session key saved to <credfile> in the format expected by the
deriva-py get_credentials() helper.


Exit status:

  0  for success
  1  for usage error
  2  for entity named in sub-command argument not found
  3  for sub-command not supported by current service configuration

"""
    )

webauthn2_manager = webauthn2.Manager()

def main(args):
    try:
        if len(args) == 2 and args[0] == 'adduser':
            if webauthn2_manager.clients.manage:
                webauthn2_manager.clients.manage.create_noauthz(webauthn2_manager, None, args[1])
            else:
                raise NotImplementedError()

        elif len(args) == 2 and args[0] == 'deluser':
            if webauthn2_manager.clients.manage:
                webauthn2_manager.clients.manage.delete_noauthz(webauthn2_manager, None, args[1])
            else:
                raise NotImplementedError()

        elif len(args) == 2 and args[0] == 'addattr':
            if webauthn2_manager.attributes.manage:
                webauthn2_manager.attributes.manage.create_noauthz(webauthn2_manager, None, args[1])
            else:
                raise NotImplementedError()

        elif len(args) == 2 and args[0] == 'delattr':
            if webauthn2_manager.attributes.manage:
                webauthn2_manager.attributes.manage.delete_noauthz(webauthn2_manager, None, args[1])
            else:
                raise NotImplementedError()

        elif len(args) in [2, 3] and args[0] == 'passwd':
            if webauthn2_manager.clients.passwd:
                if len(args) == 3 and args[2] == 'random' or len(args) == 2:
                    passwd = webauthn2_manager.clients.passwd.create_noauthz(webauthn2_manager, None, args[1], None)
                    if len(args) == 3:
                        print('new random password: %s' % passwd)
                elif len(args) == 3:
                    webauthn2_manager.clients.passwd.create_noauthz(webauthn2_manager, None, args[1], args[2])
                else:
                    usage()
                    return 1
            else:
                raise NotImplementedError()
            
        elif len(args) == 3 and args[0] == 'assign':
            if webauthn2_manager.attributes.assign:
                webauthn2_manager.attributes.assign.create_noauthz(webauthn2_manager, None, args[2], args[1])
            else:
                raise NotImplementedError()

        elif len(args) == 3 and args[0] == 'unassign':
            if webauthn2_manager.attributes.assign:
                webauthn2_manager.attributes.assign.delete_noauthz(webauthn2_manager, None, args[2], args[1])
            else:
                raise NotImplementedError()

        elif len(args) == 3 and args[0] == 'nest':
            if webauthn2_manager.attributes.nest:
                webauthn2_manager.attributes.nest.create_noauthz(webauthn2_manager, None, args[2], args[1])
            else:
                raise NotImplementedError()

        elif len(args) == 3 and args[0] == 'unnest':
            if webauthn2_manager.attributes.nest:
                webauthn2_manager.attributes.nest.delete_noauthz(webauthn2_manager, None, args[2], args[1])
            else:
                raise NotImplementedError()

        elif len(args) == 4 and args[0] == 'addrobot':
            robot_credfilename = args[2]
            try:
                with open(robot_credfilename, 'rb') as robot_credfile:
                    creds = json.load(robot_credfile)
            except:
                # missing or invalid existing credfile
                creds = None

            new_creds = webauthn2_manager.make_robot_session(args[1], datetime.timedelta(int(args[3])), existing_creds=creds)
            if new_creds is not None:
                try:
                    # purge stale credentials
                    os.remove(robot_credfilename)
                except OSError:
                    pass

                # create new credentials file
                with open(robot_credfilename, 'w') as robot_credfile:
                    json.dump(new_creds, robot_credfile, indent=2)
        else:
            usage()
            return 1
        
        return 0

    except KeyError as ev:
        print('not found: %s' % ev)
        return 2

    except NotImplementedError:
        print('command not supported by current service configuration')
        return 3

if __name__ == '__main__':
    sys.exit( main(sys.argv[1:]) )

